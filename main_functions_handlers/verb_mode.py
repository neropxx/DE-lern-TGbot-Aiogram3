from aiogram import F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from keyboards.to_verb_ikb import get_to_verb_ikb
from bot_set.bot_states import BotStates
from bot_set.my_bot import my_bot
from filters.word_filter import WordFilter
from processing.get_link import get_verb_link
from .regims_switcher import verb_mode_router


@verb_mode_router.message(F.text, StateFilter(BotStates.verb), ~F.text.startswith("/"), WordFilter())
async def verb_answer(message: types.Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç–∞–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π verb,
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ª–µ—à–µ–º (–∫–æ–º–∞–Ω–¥–∞) /,
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞, —è–≤–ª—è–µ—Ç—Å—è –¥–ª–∏–Ω–µ–µ 1 —Å–∏–º–≤–æ–ª–∞

    –ï—Å–ª–∏ –≥–ª–∞–≥–æ–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞"""
    word_link = get_verb_link(text=message.text)

    if word_link:
        await state.update_data(word_link=word_link)

        await my_bot.send_photo(chat_id=message.chat.id,
                                photo=word_link,
                                caption="–í–æ—Ç –≤–∞—à –≥–ª–∞–≥–æ–ª  üë®üèª‚Äçüè´",
                                reply_markup=get_to_verb_ikb())
    else:
        await message.reply(text="–¢–∞–∫–æ–π –≥–ª–∞–≥–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω  üëÆ‚Äç‚ôÇÔ∏è")


@verb_mode_router.message(F.text, StateFilter(BotStates.verb), ~F.text.startswith("/"), ~WordFilter(),
                          ~F.text.in_(["–•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö  üí™", "—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ", "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ",
                                       "—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ", "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ"]))
async def verb_cyrillic_error_answer(message: types.Message):
    """–•–µ–Ω–¥–µ–ª—Ä —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ–∏—à–±–æ—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await message.reply(text="–ù–∞–ø–∏—à–∏—Ç–µ –≥–ª–∞–≥–æ–ª –¥–ª–∏–Ω–µ–µ 1–≥–æ —Å–∏–º–≤–æ–ª–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö "
                             "–∑–Ω–∞–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤! üôÖ‚Äç‚ôÇÔ∏è")


@verb_mode_router.message(~F.text, StateFilter(BotStates.verb))
async def verb_message_type_error_answer(message: types.Message):
    """–•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ"""
    await message.reply(text="–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–ª–∞–≥–æ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ–º "
                             "–ª–∞—Ç–∏–Ω–∏—Ü–µ–π ü§∑‚Äç‚ôÇÔ∏è")

